#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ArduinoJson.h>

// Th√¥ng tin WiFi
const char* ssid = "";
const char* password = "";

// Webhook ƒë·ªÉ g·ª≠i c·∫£nh b√°o
const char* discordWebhookHost = "discord.com";
const int discordWebhookPort = 443;
const char* discordWebhookPath = "";///api/webhooks/

// URL c·ªßa icon trong server Discord
const char* footerIconUrl = "https://cdn.discordapp.com/emojis/1308611656355545179.webp?size=48&name=emoji_21";

// ----  C·∫•u h√¨nh Supabase ----
const char* supabaseHost = "";  // Thay b·∫±ng host Supabase c·ªßa b·∫°n
const int supabasePort = 443;
const char* supabaseApiKey = "";              // Thay b·∫±ng API key c·ªßa b·∫°n
const char* supabasePath = "/rest/v1/gasdata";                     // Thay b·∫±ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn b·∫£ng d·ªØ li·ªáu c·ªßa b·∫°n
// ----------------------------------------------

#define MQ2_PIN A0
#define GAS_THRESHOLD 600

ESP8266WebServer server(80);

void setup() {
    Serial.begin(115200);
    Serial.println("\nüöÄ ESP8266 Starting...");

    WiFi.begin(ssid, password);
    Serial.print("üîå Connecting to WiFi ");
    unsigned long startAttemptTime = millis();
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
        if (millis() - startAttemptTime > 20000) {
            Serial.println("\n‚õî WiFi Connection Failed! Restarting...");
            ESP.restart();
        }
    }
    Serial.println("\n‚úÖ WiFi Connected!");
    Serial.print("üåç IP Address: ");
    Serial.println(WiFi.localIP());

    server.on("/", HTTP_GET, []() {
        server.send(200, "text/html", getHtmlUI());
    });
    
    server.on("/data", HTTP_GET, []() {
        int gasValue = analogRead(MQ2_PIN);
        StaticJsonDocument<200> jsonDoc;
        jsonDoc["gas_level"] = gasValue;
        String jsonResponse;
        serializeJson(jsonDoc, jsonResponse);
        server.send(200, "application/json", jsonResponse);
    });
    
    server.begin();
    Serial.println("üåê Web server started!");
}

void loop() {
    server.handleClient();
    delay(2000);
    int gasValue = analogRead(MQ2_PIN);
    Serial.print("Gi√° tr·ªã kh√≠ gas ƒëo ƒë∆∞·ª£c: ");
    Serial.println(gasValue);
    
    // ---- G·ª≠i d·ªØ li·ªáu l√™n Supabase ----
    sendToSupabase(gasValue);
    // ---------------------------------------------------

    if (gasValue > GAS_THRESHOLD) {
        sendToDiscord(gasValue);
    }
}

void sendToDiscord(int gasValue) {
    WiFiClientSecure client;
    client.setInsecure();

    if (!client.connect(discordWebhookHost, discordWebhookPort)) {
        Serial.println("‚ùå K·∫øt n·ªëi ƒë·∫øn Discord th·∫•t b·∫°i!");
        return;
    }

    String payload = "{\"embeds\":[{\"title\":\"üö® C·∫£nh b√°o kh√≠ gas v∆∞·ª£t ng∆∞·ª°ng an to√†n! üö®\",\"description\":\"N·ªìng ƒë·ªô kh√≠ gas cao: " + String(gasValue) + "\",\"color\":16711680,\"footer\":{\"text\":\"By HELLSNAKE",\"icon_url\":\"" + String(footerIconUrl) + "\"}}]}";
    String request = String("POST ") + discordWebhookPath + " HTTP/1.1\r\n" +
                     "Host: " + discordWebhookHost + "\r\n" +
                     "Content-Type: application/json\r\n" +
                     "Content-Length: " + payload.length() + "\r\n" +
                     "Connection: close\r\n\r\n" +
                     payload;

    client.print(request);
    while (client.connected()) {
        String line = client.readStringUntil('\n');
        if (line == "\r") {
            break;
        }
    }
    Serial.println("‚úÖ Ph·∫£n h·ªìi t·ª´ Discord: " + client.readString());
    client.stop();
}

// ----  H√†m g·ª≠i d·ªØ li·ªáu l√™n Supabase ----
void sendToSupabase(int gasValue) {
    WiFiClientSecure client;
    client.setInsecure();

    if (!client.connect(supabaseHost, supabasePort)) {
        Serial.println("‚ùå K·∫øt n·ªëi ƒë·∫øn Supabase th·∫•t b·∫°i!");
        return;
    }
    
    // payload JSON ch·ª©a gi√° tr·ªã kh√≠ gas
    String payload = "{\"gas_value\":" + String(gasValue) + "}";
    
    String request = String("POST ") + supabasePath + " HTTP/1.1\r\n" +
                     "Host: " + supabaseHost + "\r\n" +
                     "Content-Type: application/json\r\n" +
                     "apikey: " + supabaseApiKey + "\r\n" +
                     "Authorization: Bearer " + supabaseApiKey + "\r\n" +
                     "Content-Length: " + payload.length() + "\r\n" +
                     "Connection: close\r\n\r\n" +
                     payload;
    
    client.print(request);
    while (client.connected()) {
        String line = client.readStringUntil('\n');
        if (line == "\r") {
            break;
        }
    }
    Serial.println("‚úÖ Ph·∫£n h·ªìi t·ª´ Supabase: " + client.readString());
    client.stop();
}

